## kubernetes资源管理

### 一、管理资源的两种方式: 

```
1、kubectl客户端工具
2、yaml文件    kubectl create -f 文件名称 
```



### 1、kubectl客户端工具

##### 1、pod/deployment管理

```
[root@k8s-master ~]# kubectl run nginx-test01 --replicas=4 --labels="app=nginx-test01" --image=nginx --port=80 
```

```
[root@k8s-master ~]# kubectl get deployment
NAME           READY   UP-TO-DATE   AVAILABLE   AGE
nginx-test01   4/4     4            4           47s
test1          1/1     1            1           4h39m
```

```
[root@k8s-master ~]# kubectl get pod
NAME                            READY   STATUS    RESTARTS   AGE
nginx-test01-84759d49f6-bvmfz   1/1     Running   0          94s
nginx-test01-84759d49f6-dmhw8   1/1     Running   0          94s
nginx-test01-84759d49f6-km7f7   1/1     Running   0          94s
nginx-test01-84759d49f6-wpv6b   1/1     Running   0          94s
test1-7f5bdf96fb-6pgvz          1/1     Running   0          4h40m
```

```
[root@k8s-master ~]# kubectl get pod -o wide
NAME                            READY   STATUS    RESTARTS   AGE     IP           NODE                   NOMINATED NODE   READINESS GATES
nginx-test01-84759d49f6-bvmfz   1/1     Running   0          2m10s   10.244.2.3   k8s-node02.linux.com   <none>           <none>
nginx-test01-84759d49f6-dmhw8   1/1     Running   0          2m10s   10.244.2.2   k8s-node02.linux.com   <none>           <none>
nginx-test01-84759d49f6-km7f7   1/1     Running   0          2m10s   10.244.1.3   k8s-node01.linux.com   <none>           <none>
nginx-test01-84759d49f6-wpv6b   1/1     Running   0          2m10s   10.244.1.4   k8s-node01.linux.com   <none>           <none>
test1-7f5bdf96fb-6pgvz          1/1     Running   0          4h41m   10.244.1.2   k8s-node01.linux.com   <none>           <none>
[root@k8s-master ~]# 
```

```
[root@k8s-master ~]# kubectl get pods --show-labels
NAME                            READY   STATUS    RESTARTS   AGE     LABELS
nginx-test01-84759d49f6-bvmfz   1/1     Running   0          3m26s   app=nginx-test01,pod-template-hash=84759d49f6
nginx-test01-84759d49f6-dmhw8   1/1     Running   0          3m26s   app=nginx-test01,pod-template-hash=84759d49f6
nginx-test01-84759d49f6-km7f7   1/1     Running   0          3m26s   app=nginx-test01,pod-template-hash=84759d49f6
nginx-test01-84759d49f6-wpv6b   1/1     Running   0          3m26s   app=nginx-test01,pod-template-hash=84759d49f6
test1-7f5bdf96fb-6pgvz          1/1     Running   0          4h42m   app=test1,pod-template-hash=7f5bdf96fb

```

```
[root@k8s-master ~]# kubectl get pods -l app=nginx-test01
NAME                            READY   STATUS    RESTARTS   AGE
nginx-test01-84759d49f6-bvmfz   1/1     Running   0          4m58s
nginx-test01-84759d49f6-dmhw8   1/1     Running   0          4m58s
nginx-test01-84759d49f6-km7f7   1/1     Running   0          4m58s
nginx-test01-84759d49f6-wpv6b   1/1     Running   0          4m58s

```



##### 2、创建服务

```
[root@k8s-master ~]# kubectl expose deployment nginx-test01 --port=8888 --target-port=80 --type=NodePort --name=nginx-test01-service 

服务类型:
	1、ClusterIP
		该类型的服务只能在集群内部被访问，不能对外暴露 
		
	2、NodePort
		支持向外部发布服务端口
		
	3、LoadBalancer
		支持向外部发布服务端口, 配置云平台使用 
```

```
[root@k8s-master ~]# kubectl get service
NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE
kubernetes             ClusterIP   10.1.0.1       <none>        443/TCP          5h17m
nginx-test01-service   NodePort    10.1.126.123   <none>        8888:30586/TCP   47s
test1                  NodePort    10.1.52.222    <none>        80:32444/TCP     4h45m
```

[root@k8s-master ~]# kubectl get service
NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE
kubernetes             ClusterIP   10.1.0.1       <none>        443/TCP          5h17m
nginx-test01-service   NodePort    10.1.126.123   <none>        8888:30586/TCP   47s
test1                  NodePort    10.1.52.222    <none>        80:32444/TCP     4h45m





##### 3、故障排查相关命令

```
# kubectl get pods -o wide
```

```
# kubectl get services
```

```
# kubectl describe <pod_name>
```

```
# kubect logs <pod_name>
```

```
# docker logs <docker_id>
```



##### 4、扩容/缩容

```
[root@k8s-master ~]# kubectl get deployment
NAME           READY   UP-TO-DATE   AVAILABLE   AGE
nginx-test01   4/4     4            4           25m
test1          1/1     1            1           5h4m

[root@k8s-master ~]# kubectl scale deploy nginx-test01 --replicas 8
deployment.extensions/nginx-test01 scaled

[root@k8s-master ~]# kubectl get deployment
NAME           READY   UP-TO-DATE   AVAILABLE   AGE
nginx-test01   4/8     8            4           26m
test1          1/1     1            1           5h5m

```

##### 5、删除对象

```
[root@k8s-master ~]# kubectl delete service test1

[root@k8s-master ~]# kubectl delete service nginx-test01-service
```

```
[root@k8s-master ~]# kubectl delete deployment test1

[root@k8s-master ~]# kubectl delete deployment nginx-test01

```







#### 2、基于YAML文件创建资源对象 

##### 1、配置文件说明:

	1、定义配置时, 指定最新稳定版API(当前为v1)
		[root@k8s-master ~]# kubectl api-versions
		
	2、配置文件应该存储在集群之外的版本控制仓库中
	
	3、基于YAML语法
	
	4、可以将相关对象组合成单个文件, 通常更容易管理
	
	5、不要没必要的指定默认值，尽量减少配置
	
	6、好的习惯要加注释  


	

##### 2、案例：创建deployment

```
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: nginx-test01
  labels:
       web: nginx
spec:
  replicas: 4
  selector:
     matchLabels:
           app: nginx
  template:
     metadata:
         labels:
            app: nginx
     spec:
         containers:
            - name: nginx-test01
              image: nginx
              ports:
              - containerPort: 80
```

```
[root@k8s-master ~]# kubectl create -f nginx_test01.yaml 

```

```
[root@k8s-master ~]# kubectl get deployment
NAME           READY   UP-TO-DATE   AVAILABLE   AGE
nginx-test01   4/4     4            4           62s


[root@k8s-master ~]# kubectl get pods -o wide
NAME                            READY   STATUS    RESTARTS   AGE   IP           NODE                   NOMINATED NODE   READINESS GATES
nginx-test01-5b6d455484-dhwcb   1/1     Running   0          68s   10.244.1.8   k8s-node01.linux.com   <none>           <none>
nginx-test01-5b6d455484-t2n72   1/1     Running   0          68s   10.244.2.7   k8s-node02.linux.com   <none>           <none>
nginx-test01-5b6d455484-tlb9v   1/1     Running   0          68s   10.244.1.7   k8s-node01.linux.com   <none>           <none>
nginx-test01-5b6d455484-v8bx4   1/1     Running   0          68s   10.244.2.6   k8s-node02.linux.com   <none>           <none>

```



##### 3、创建nginx服务 

```
apiVersion: v1
kind: Service
metadata:
   name: nginx-test01-service
   labels:
      app: nginx
spec:
   ports:
   - port: 88
     targetPort: 80
   selector:
      app: nginx
   type: NodePort
```

```
[root@k8s-master ~]# kubectl create -f nginx-test01-service.yaml 
service/nginx-test01-service created

[root@k8s-master ~]# kubectl get service
NAME                   TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
kubernetes             ClusterIP   10.1.0.1     <none>        443/TCP        6h38m
nginx-test01-service   NodePort    10.1.98.55   <none>        88:31043/TCP   6s

```



#### 3、pod管理参数

##### 1、创建pod

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-test02
  labels:
      app: nginx02
spec:
   containers:
   - name: nginx-test02
     image: nginx
```

##### 2、资源限制

```
	1000m 毫核  ==== 1颗CPU资源 
	
apiVersion: v1
kind: Pod
metadata:
  name: nginx-test03
  labels:
      app: nginx03
spec:
   containers:
   - name: nginx-test03
     image: nginx
     resources:
        requests:
             memory: "512Mi"
             cpu: "1000m"
        limits:
             memory: "1Gi"
             cpu: "2000m"
```

##### 3、调度约束

###### 1) pod.spec.nodeName

```
明确指定一个集群节点名称
```

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-test04
  labels:
      app: nginx04
spec:
   nodeName: k8s-node02.linux.com
   containers:
   - name: nginx-test04
     image: nginx
     resources:
        requests:
             memory: "512Mi"
             cpu: "1000m"
        limits:
             memory: "1Gi"
             cpu: "2000m"
```

###### 2) pod.spec.nodeSelector

```
通过集群节点上的标签选择定位资源 
```

```
[root@k8s-master ~]# kubectl label nodes k8s-node01.linux.com k1=v1

[root@k8s-master ~]# kubectl describe node k8s-node01.linux.com
```

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-test05
  labels:
      app: nginx05
spec:
   nodeSelector:
       k1: v1
   containers:
   - name: nginx-test05
     image: nginx
     resources:
        requests:
             memory: "512Mi"
             cpu: "1000m"
        limits:
             memory: "1Gi"
             cpu: "2000m"
```

##### 4、健康状态检查

```
提供Probe机制【检查容器中应用的机制】，有以下两种类型：

1. livenessProbe

	如果检查失败, 将杀死容器, 根据Pod的restartPolicy来操作

2. readinessProbe

	如果检查失败, Kubernetes会把Pod从service endpoints中剔除
```

```
restartPolicy三种策略：

		Always：当容器停止，总是重建容器；默认策略
		OnFailure： 当容器异常退出(状态码非0)，重启容器
		Never: 当容器终止退出，从不重启容器

apiVersion: v1
kind: Pod
metadata:
  name: nginx2-pod
  labels:
	  app: nginx2
spec:
   containers:
   - name: nginx2
	 image: nginx:1.10
	 resources:
		requests:
			 memory: "64Mi"
			 cpu: "250m"
		limits:
			 memory: "128Mi"
			 cpu: "500m"
   restartPolicy: OnFailure
```

```
Probe支持以下三种检查方法：

1、httpGet 

	发送HTTP请求, 200-400范围内的状态码均为成功

2、exec 

	执行shell命令返回状态码为0成功

3、tcpSocket

	发送TCP Socket建立成功
```

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-test10
  labels:
    app: nginx10
spec:
   containers:
   - name: nginx-test10
     image: nginx
     ports:
     - containerPort: 80
     livenessProbe:
        httpGet:
          path: /music.html
          port: 80
```


















